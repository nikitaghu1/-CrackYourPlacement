class Solution{
    
    // Return the size of the largest sub-tree which is also a BST
    static class Info{
        boolean isBST;
        int size;
        int min;
        int max;
        public Info(boolean isBST,int size,int min,int max){
            this.isBST=isBST;
            this.size=size;
            this.min=min;
            this.max=max;
            
        }
        
    }
    public static int maxBST=0;
     public static Info isLargestBST(Node root){
         if(root==null){
             return new Info(true,0,Integer.MAX_VALUE,Integer.MIN_VALUE);
         }
         Info leftInfo=isLargestBST(root.left);
         Info rightInfo=isLargestBST(root.right);
         int size=leftInfo.size+rightInfo.size+1;
         int min=Math.min(root.data,Math.min(leftInfo.min,rightInfo.min));
          int max=Math.max(root.data,Math.max(leftInfo.max,rightInfo.max));
          
          if(root.data>=rightInfo.min || root.data<=leftInfo.max){
              return new Info(false,size,min,max);
              
          }
         if(leftInfo.isBST && rightInfo.isBST){
             maxBST=Math.max(maxBST,size);
             return new Info(true,size,min,max);
         }
         
          return new Info(false,size,min,max);
     }
    
    
    static int largestBst(Node root)
    {
        // Write your code here
        maxBST=0;
        isLargestBST(root);
        return maxBST;
        
        
    }
    
}
